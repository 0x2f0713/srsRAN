  /**
 *
 * \section COPYRIGHT
 *
 * Copyright 2013-2015 The srsLTE Developers. See the
 * COPYRIGHT file at the top-level directory of this distribution.
 *
 * \section LICENSE
 *
 * This file is part of the srsLTE library.
 *
 * srsLTE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * srsLTE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * A copy of the GNU Affero General Public License can be found in
 * the LICENSE file in the top-level directory of this distribution
 * and at http://www.gnu.org/licenses/.
 *
 */
#include <string.h>


#include "srslte/srslte.h"
#include "srsapps/ue/phy/sched_grant.h"

#ifndef UEULSCHEDGRANT_H
#define UEULSCHEDGRANT_H

namespace srslte {
namespace ue {  

  /* Uplink/Downlink scheduling grant generated by a successfully decoded PDCCH */ 
  class ul_sched_grant : public sched_grant {
  public:

             ul_sched_grant(rnti_type_t type, uint16_t rnti) : sched_grant(type, rnti) {} 
             ul_sched_grant(uint16_t rnti) : sched_grant(rnti) {} 
             
    uint32_t get_rv() {
      return ul_dci.rv_idx; 
    }
    void     set_rv(uint32_t rv) {
      ul_dci.rv_idx = rv; 
    }
    bool     get_ndi() {
      return ul_dci.ndi; 
    }
    void     set_ndi(bool value) {
      ul_dci.ndi = value; 
    }   
    bool     get_cqi_request() {
      return ul_dci.cqi_request; 
    }
    void     get_ul_grant(srslte_ra_ul_grant_t *ul_grant) {
      memcpy(ul_grant, &grant, sizeof(srslte_ra_ul_grant_t));
    }
    bool     is_sps_release() {
      return false; 
    }
    uint32_t get_tbs() {
      return grant.mcs.tbs; 
    }
    uint32_t get_mcs() {
      return ul_dci.mcs_idx; 
    }
    uint32_t get_current_tx_nb() {
      return current_tx_nb; 
    }
    void     set_current_tx_nb(uint32_t current_tx_nb) {
      current_tx_nb = current_tx_nb; 
    }
    uint32_t get_I_lowest() {
      return grant.n_prb[0];
    }
    uint32_t get_n_dmrs() {
      return ul_dci.n_dmrs;
    }
    bool     is_from_rar() {
      return grant_is_from_rar; 
    }
    bool     create_from_dci(srslte_dci_msg_t *msg, srslte_cell_t cell, uint32_t n_rb_ho) {
      grant_is_from_rar = false; 
      if (srslte_dci_msg_to_ul_grant(msg, cell.nof_prb, n_rb_ho, &ul_dci, &grant)) {
        return false; 
      } else {
        if (SRSLTE_VERBOSE_ISINFO()) {
          srslte_ra_pusch_fprint(stdout, &ul_dci, cell.nof_prb);
        }
        return true; 
      }
    }
    bool     create_from_rar(srslte_dci_rar_grant_t *rar, srslte_cell_t cell, uint32_t n_rb_ho) {
      grant_is_from_rar = true; 
      if (srslte_dci_rar_to_ul_grant(rar, cell.nof_prb, n_rb_ho, &ul_dci, &grant)) {
        return false; 
      } else {
        if (SRSLTE_VERBOSE_ISINFO()) {
          srslte_ra_pusch_fprint(stdout, &ul_dci, cell.nof_prb);
        }
        return true; 
      }
    }
    bool    to_pusch_cfg(srslte_pusch_hopping_cfg_t *hopping_cfg, srslte_pusch_srs_cfg_t *srs_cfg, uint32_t sf_idx, srslte_ue_ul_t *ue_ul) {
      memcpy(&ue_ul->pusch_cfg.grant, &grant, sizeof(srslte_ra_ul_grant_t)); 
      if (srslte_ue_ul_cfg_grant(ue_ul, NULL, hopping_cfg, srs_cfg, sf_idx, get_rv())) {
        return false; 
      }
      return true; 
    }
  private: 
    srslte_ra_ul_grant_t grant; 
    srslte_ra_ul_dci_t   ul_dci; 
    uint32_t             current_tx_nb; 
    uint16_t             rnti; 
    bool                 grant_is_from_rar; 
  };
 
}
}

#endif
