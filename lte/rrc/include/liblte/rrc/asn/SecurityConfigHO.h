/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c)
 * From ASN.1 module "EUTRA-RRC-Definitions"
 * 	found in "./asn1c/ASN1_files/EUTRA-RRC-Definitions.asn"
 * 	`asn1c -gen-PER -fcompound-names -fnative-types`
 */

#ifndef	_SecurityConfigHO_H_
#define	_SecurityConfigHO_H_


#include <liblte/rrc/asn/asn_application.h>

/* Including external dependencies */
#include <liblte/rrc/asn/BOOLEAN.h>
#include "liblte/rrc/asn/NextHopChainingCount.h"
#include <liblte/rrc/asn/constr_SEQUENCE.h>
#include "liblte/rrc/asn/SecurityAlgorithmConfig.h"
#include <liblte/rrc/asn/OCTET_STRING.h>
#include <liblte/rrc/asn/constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum SecurityConfigHO__handoverType_PR {
	SecurityConfigHO__handoverType_PR_NOTHING,	/* No components present */
	SecurityConfigHO__handoverType_PR_intraLTE,
	SecurityConfigHO__handoverType_PR_interRAT
} SecurityConfigHO__handoverType_PR;

/* Forward declarations */
struct SecurityAlgorithmConfig;

/* SecurityConfigHO */
typedef struct SecurityConfigHO {
	struct SecurityConfigHO__handoverType {
		SecurityConfigHO__handoverType_PR present;
		union SecurityConfigHO__handoverType_u {
			struct SecurityConfigHO__handoverType__intraLTE {
				struct SecurityAlgorithmConfig	*securityAlgorithmConfig	/* OPTIONAL */;
				BOOLEAN_t	 keyChangeIndicator;
				NextHopChainingCount_t	 nextHopChainingCount;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} intraLTE;
			struct SecurityConfigHO__handoverType__interRAT {
				SecurityAlgorithmConfig_t	 securityAlgorithmConfig;
				OCTET_STRING_t	 nas_SecurityParamToEUTRA;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} interRAT;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} handoverType;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} SecurityConfigHO_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_SecurityConfigHO;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "liblte/rrc/asn/SecurityAlgorithmConfig.h"

#endif	/* _SecurityConfigHO_H_ */
#include <liblte/rrc/asn/asn_internal.h>
